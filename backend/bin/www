#!/usr/bin/env node
const http = require('http');
const app = require('../app');

const { port } = require('../config');

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      // eslint-disable-next-line no-console
      console.error(`port ${port} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      // eslint-disable-next-line no-console
      console.error(`port ${port} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  // eslint-disable-next-line no-console
  console.log(`Listening on port ${port}`);
  // eslint-disable-next-line no-console
  console.log('------------------------------');
}

// Create HTTP server.
const server = http.createServer(app.callback());

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
